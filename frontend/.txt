ini adalah versi pertama dari transaksi


 "use client";

 import { useState, useEffect } from "react";
 import { useSearchParams } from "next/navigation";
 import { IMenu } from "@/app/types";
 import { getCookies } from "../../../lib/client-cookies";
 import { BASE_API_URL, BASE_IMAGE_MENU } from "@/global";
 import { get } from "../../../lib/bridge";
 import { AlertToko } from "@/components/alert";
 import Image from "next/image";
 import AddOrder from "./addOrder";
 import Search from "./search";
 import { ButtonPrimary } from "@/components/button";
 import { IoMdClose } from "react-icons/io";

 const OrderPage = () => {
     const searchParams = useSearchParams();
     const search = searchParams.get("search") || "";

     const [menu, setMenu] = useState<IMenu[]>([]);
     const [loading, setLoading] = useState(true);
     const [orderQty, setOrderQty] = useState<{ [key: number]: number }>({});
     const [order, setOrder] = useState(false);

     const handleOrder = () => {
         setOrder(!order);
     };

     const getMenu = async () => {
         try {
             const TOKEN = getCookies("token") || "";
             const url = `${BASE_API_URL}/menu?search=${search}`;
             const { data } = await get(url, TOKEN);
             if ((data as { status: boolean; data: IMenu[] }).status) {
                 setMenu((data as { status: boolean; data: IMenu[] }).data);
             }
         } catch (error) {
             console.error("Error getmenu menu:", error);
         } finally {
             setLoading(false);
         }
     };

     useEffect(() => {
         getMenu();
     }, [search]);

     const updateQty = (id: number, increment: boolean) => {
         setOrderQty((prevQty) => {
             const currentQty = prevQty[id] || 0;
             const newQty = increment ? currentQty + 1 : Math.max(0, currentQty - 1);
             return { ...prevQty, [id]: newQty };
         });
     };

     const selectedOrders = Object.keys(orderQty)
         .filter((id) => orderQty[Number(id)] > 0)
         .map((id) => {
             const menuItem = menu.find((item) => item.id === Number(id));
             return {
                 id: Number(id),
                 name: menuItem?.name || "Unknown",
                 qty: orderQty[Number(id)],
                 price: menuItem?.price || 0,
                 picture: menuItem?.picture || "",
             };
         });

     const totalTransaction = selectedOrders.reduce((total, item) => {
         return total + item.qty * item.price;
     }, 0);

     const category = (cat: string): React.ReactNode => {
         if (cat === "FOOD") {
             return (
                 <span className="bg-blue-100 text-blue-800 text-sm font-medium px-2.5 py-0.5 rounded-full dark:bg-blue-900 dark:text-blue-300">
                     Food
                 </span>
             );
         }
         if (cat === "SNACK") {
             return (
                 <span className="bg-indigo-100 text-indigo-800 text-sm font-medium px-2.5 py-0.5 rounded-full dark:bg-indigo-900 dark:text-indigo-300">
                     Snack
                 </span>
             );
         }
         return (
             <span className="bg-purple-100 text-purple-800 text-sm font-medium px-2.5 py-0.5 rounded-full dark:bg-purple-900 dark:text-purple-300">
                 Drink
             </span>
         );
     };

     return (
         <div>
             <div className="mt-2 rounded-lg">
                 <div className="flex flex-col my-10 px-20">
                     <h4 className="text-xl font-bold text-slate-900">Menu Yang Tersedia</h4>
                     <p className="mb-2">Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>
                     <div className="flex items-center w-full max-w-md flex-grow">
                         <Search url={`/cashier/toko`} search={search} />
                     </div>
                 </div>

                 {loading ? (
                     <p className="text-white">Loading...</p>
                 ) : menu.length === 0 ? (
                     <AlertToko title="Informasi">No data available</AlertToko>
                 ) : (
                     <>
                         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 my-10">
                             {menu.map((data) => (
                                 <div key={data.id} className="p-4 text-blackl rounded-lg flex flex-col items-center text-center">
                                     <Image
                                         width={300}
                                         height={270}
                                         src={`${BASE_IMAGE_MENU}/${data.picture}`}
                                         className="shadow-2xl"
                                         alt="preview"
                                         unoptimized
                                     />
                                     <div className="flex flex-col text-white items-center bg-primary rounded-b-md py-5 w-[300px]">
                                         <h5 className="font-bold text-lg">{data.name}</h5>
                                         <p className="text-sm">{data.description}</p>
                                         <span className="font-bold">Rp {data.price.toLocaleString()}</span>
                                         <div className="mt-2">{category(data.category)}</div>
                                         <div className="flex items-center gap-3 mt-3">
                                             <button
                                                 onClick={() => updateQty(data.id, false)}
                                                 className="px-2 py-1 text-white bg-red-500 rounded-full"
                                             >
                                                 -
                                             </button>
                                             <span>{orderQty[data.id] || 0}</span>
                                             <button
                                                 onClick={() => updateQty(data.id, true)}
                                                 className="px-2 py-1 text-white bg-green-500 rounded-full"
                                             >
                                                 +
                                             </button>
                                         </div>
                                         <div className="flex flex-col items-center mt-3">
                                             <ButtonPrimary type={"button"} onClick={() => handleOrder()}>
                                                 Tambahkan Keranjang
                                             </ButtonPrimary>
                                         </div>
                                     </div>
                                 </div>
                             ))}
                         </div>

                         {/* Modal Keranjang */}
                         {order && (
                             <div className="fixed bg-black/60 backdrop-blur-sm flex items-center justify-center inset-0 z-50">
                                 <div className="relative bg-white shadow-lg p-6 rounded-xl w-[90%] max-w-xl">
                                     <button
                                         onClick={handleOrder}
                                         className="absolute top-4 right-4 text-2xl text-black hover:text-primary"
                                     >
                                         <IoMdClose />
                                     </button>
                                     <h4 className="text-xl font-bold mb-4">Keranjang</h4>
                                     {selectedOrders.length === 0 ? (
                                         <p className="text-center text-gray-500">Belum ada item dalam keranjang.</p>
                                     ) : (
                                         <div className="space-y-4 max-h-[60vh] overflow-y-auto">
                                             {selectedOrders.map((order) => (
                                                 <div key={order.id} className="flex items-center gap-4 bg-gray-100 p-4 rounded-lg">
                                                     <Image
                                                         width={80}
                                                         height={80}
                                                         src={`${BASE_IMAGE_MENU}/${order.picture}`}
                                                         alt={`Image of ${order.name}`}
                                                         className="rounded-lg"
                                                         unoptimized
                                                     />
                                                     <div className="flex flex-col flex-1 text-black">
                                                         <h5 className="font-semibold">{order.name}</h5>
                                                         <p className="text-sm">Rp {order.price.toLocaleString()} x {order.qty}</p>
                                                         <div className="flex items-center gap-3 mt-2">
                                                             <button
                                                                 onClick={() => updateQty(order.id, false)}
                                                                 className="px-2 py-1 bg-red-500 text-white rounded-full"
                                                             >-</button>
                                                             <span>{orderQty[order.id]}</span>
                                                             <button
                                                                 onClick={() => updateQty(order.id, true)}
                                                                 className="px-2 py-1 bg-green-500 text-white rounded-full"
                                                             >+</button>
                                                         </div>
                                                     </div>
                                                 </div>
                                             ))}
                                         </div>
                                     )}
                                 </div>
                             </div>
                         )}

                         {/* Ringkasan Transaksi */}
                         {selectedOrders.length > 0 && (
                             <div className="mt-6 bg-gray-700 p-4 rounded-lg text-white">
                                 <h4 className="text-lg font-bold">Transaction Details</h4>
                                 <ul className="text-sm">
                                     {selectedOrders.map((order) => (
                                         <li key={order.id} className="flex justify-between border-b py-1">
                                             <span>{order.name} x {order.qty}</span>
                                             <span>Rp {(order.qty * order.price).toLocaleString()}</span>
                                         </li>
                                     ))}
                                 </ul>
                                 <h4 className="text-lg font-bold mt-3">Total: Rp {totalTransaction.toLocaleString()}</h4>
                                 <div className="mt-4">
                                     <AddOrder orderLists={selectedOrders} />
                                 </div>
                             </div>
                         )}
                     </>
                 )}
             </div>
         </div>
     );
 };

 export default OrderPage;















 Ini adalah code yang kedua dari transaksi

"use client";

import { useState, useEffect } from "react";
import { useSearchParams } from "next/navigation";
import { IMenu } from "@/app/types";
import { getCookies } from "../../../lib/client-cookies";
import { BASE_API_URL, BASE_IMAGE_MENU } from "@/global";
import { get } from "../../../lib/bridge";
import { AlertToko } from "@/components/alert";
import Image from "next/image";
import AddOrder from "./addOrder";
import Search from "./search";
import { ButtonPrimary } from "@/components/button";
import { IoMdClose } from "react-icons/io";

const OrderPage = () => {
    const searchParams = useSearchParams();
    const search = searchParams.get("search") || "";
    const [menu, setMenu] = useState<IMenu[]>([]);
    const [loading, setLoading] = useState(true);
    const [orderQty, setOrderQty] = useState<{ [key: number]: number }>({});
    const [order, setOrder] = useState(false);
    const [selectedOrderIds, setSelectedOrderIds] = useState<number[]>([]);

    const getMenu = async () => {
        try {
            const TOKEN = getCookies("token") || "";
            const url = `${BASE_API_URL}/menu?search=${search}`;
            const { data } = await get(url, TOKEN);
            if ((data as { status: boolean; data: IMenu[] }).status) {
                setMenu((data as { status: boolean; data: IMenu[] }).data);
            }
        } catch (error) {
            console.error("Error getmenu menu:", error);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        getMenu();
    }, [search]);

    const handleOrder = (id: number) => {
        if (!selectedOrderIds.includes(id)) {
            setSelectedOrderIds((prev) => [...prev, id]);
        }
        setOrder(true);
    };

    const updateQty = (id: number, increment: boolean) => {
        setOrderQty((prevQty) => {
            const currentQty = prevQty[id] || 0;
            const newQty = increment ? currentQty + 1 : Math.max(0, currentQty - 1);
            return { ...prevQty, [id]: newQty };
        });
    };

    const totalTransaction = menu.reduce((total, item) => {
        const qty = orderQty[item.id] || 0;
        return total + qty * item.price;
    }, 0);

    const selectedOrders = Object.keys(orderQty)
        .filter((id) => orderQty[Number(id)] > 0)
        .map((id) => {
            const menuItem = menu.find((item) => item.id === Number(id));
            return {
                id: Number(id),
                name: menuItem?.name || "Unknown",
                qty: orderQty[Number(id)],
                price: menuItem?.price || 0,
            };
        });

    const category = (cat: string): React.ReactNode => {
        if (cat === "FOOD") {
            return <span className="bg-blue-100 text-blue-800 text-sm font-medium px-2.5 py-0.5 rounded-full dark:bg-blue-900 dark:text-blue-300">Food</span>;
        }
        if (cat === "SNACK") {
            return <span className="bg-indigo-100 text-indigo-800 text-sm font-medium px-2.5 py-0.5 rounded-full dark:bg-indigo-900 dark:text-indigo-300">Snack</span>;
        }
        return <span className="bg-purple-100 text-purple-800 text-sm font-medium px-2.5 py-0.5 rounded-full dark:bg-purple-900 dark:text-purple-300">Drink</span>;
    };

    return (
        <div>
            <div className="mt-2 rounded-lg">
                <div className="flex flex-col my-10 px-20">
                    <h4 className="text-xl font-bold text-slate-900">Menu Yang Tersedia</h4>
                    <p className="mb-2">Silakan pilih menu yang ingin dipesan.</p>
                    <div className="flex items-center w-full max-w-md flex-grow">
                        <Search url={`/cashier/toko`} search={search} />
                    </div>
                </div>

                {loading ? (
                    <p className="text-white">Loading...</p>
                ) : menu.length === 0 ? (
                    <AlertToko title="Informasi">No data available</AlertToko>
                ) : (
                    <>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 my-10">
                            {menu.map((data) => (
                                <div key={data.id} className="p-4 text-blackl rounded-lg flex flex-col items-center text-center">
                                    <Image width={300} height={270} src={`${BASE_IMAGE_MENU}/${data.picture}`} className="shadow-2xl" alt="preview" unoptimized />
                                    <div className="flex flex-col text-white items-center bg-primary rounded-b-md py-5 w-[300px]">
                                        <h5 className="font-bold text-lg">{data.name}</h5>
                                        <p className="text-sm">{data.description}</p>
                                        <span className="font-bold">Rp {data.price.toLocaleString()}</span>
                                        <div className="mt-2">{category(data.category)}</div>
                                        <div className="flex flex-col items-center mt-3">
                                            <ButtonPrimary type="button" onClick={() => handleOrder(data.id)}>
                                                Tambahkan Keranjang
                                            </ButtonPrimary>
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>

                        {order && (
                            <div className="fixed bg-black/60 backdrop-blur-sm flex items-center justify-center inset-0 z-99999">
                                <div className="relative bg-white shadow-lg p-6 rounded-xl w-[90%] max-w-xl overflow-y-auto max-h-[90vh]">
                                    <button onClick={() => setOrder(false)} className="absolute top-4 right-4 text-2xl text-black hover:text-primary">
                                        <IoMdClose />
                                    </button>
                                    <div>
                                        {menu.filter((item) => selectedOrderIds.includes(item.id)).map((data) => (
                                            <div key={data.id} className="mb-6 border-b pb-4">
                                                <Image
                                                    width={300}
                                                    height={270}
                                                    src={`${BASE_IMAGE_MENU}/${data.picture}`}
                                                    className="shadow-2xl rounded-lg"
                                                    alt="preview"
                                                    unoptimized
                                                />
                                                <h5 className="font-bold text-lg mt-2">{data.name}</h5>
                                                <p className="text-sm">{data.description}</p>
                                                <span className="font-bold block mt-1">Rp {data.price.toLocaleString()}</span>
                                                <div className="flex items-center gap-3 mt-2">
                                                    <button
                                                        className="bg-red-500 text-white px-2 py-1 rounded"
                                                        onClick={() => updateQty(data.id, false)}
                                                    >
                                                        -
                                                    </button>
                                                    <span>{orderQty[data.id] || 0}</span>
                                                    <button
                                                        className="bg-green-500 text-white px-2 py-1 rounded"
                                                        onClick={() => updateQty(data.id, true)}
                                                    >
                                                        +
                                                    </button>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            </div>
                        )}


                    </>
                )}
            </div>
        </div>
    );
};

export default OrderPage;



Ini adalah versi yang ketiga
"use client";

import { useState, useEffect, useRef, FormEvent } from "react";
import { useSearchParams, useRouter } from "next/navigation";
import { IMenu, IOrder } from "@/app/types";
import { getCookies } from "@/lib/client-cookies";
import { BASE_API_URL, BASE_IMAGE_MENU } from "@/global";
import { get } from "@/lib/bridge";
import { AlertToko } from "@/components/alert";
import Image from "next/image";
import Search from "./search";
import { ButtonPrimary, ButtonDanger } from "@/components/button";
import { IoMdClose } from "react-icons/io";
import { toast, ToastContainer } from "react-toastify";
import { InputGroupComponent, TextGroupComponent } from "@/components/InputComponent";
import Select from "@/components/select";
import Payment from "@/components/payment_method";
import CardSelect from "@/components/card";


const OrderPage = () => {
    const searchParams = useSearchParams();
    const search = searchParams.get("search") || "";
    const router = useRouter();

    const [menu, setMenu] = useState<IMenu[]>([]);
    const [loading, setLoading] = useState(true);
    const [orderQty, setOrderQty] = useState<{ [key: number]: number }>({});
    const [order, setOrder] = useState(false);
    const [selectedOrderIds, setSelectedOrderIds] = useState<number[]>([]);

    const resetOrderState = () => {
        setOrderQty({});
        setSelectedOrderIds([]);
        setOrderForm({
            id: 0,
            uuid: "",
            customer: "",
            table_number: "",
            total_price: 0,
            payment_method: "",
            status: "",
            createdAt: "",
            updatedAt: "",
            userId: 0,
            orderLists: [],
        });
        setOrderNote("");
        setOrder(false);
    };


    const [orderForm, setOrderForm] = useState<IOrder>({
        id: 0,
        uuid: "",
        customer: "",
        table_number: "",
        total_price: 0,
        payment_method: "",
        status: "",
        createdAt: "",
        updatedAt: "",
        userId: 0,
        orderLists: [],
    });
    const [orderNote, setOrderNote] = useState<string>("");
    const formRef = useRef<HTMLFormElement>(null);

    const getMenu = async () => {
        try {
            const TOKEN = getCookies("token") || "";
            const url = `${BASE_API_URL}/menu?search=${search}`;
            const { data } = await get(url, TOKEN);
            if ((data as { status: boolean; data: IMenu[] }).status) {
                setMenu((data as { status: boolean; data: IMenu[] }).data);
            }
        } catch (error) {
            console.error("Error getmenu menu:", error);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        getMenu();
    }, [search]);

    const handleOrder = (id: number) => {
        if (!selectedOrderIds.includes(id)) {
            setSelectedOrderIds((prev) => [...prev, id]);
        }
        setOrder(true);
    };

    const updateQty = (id: number, increment: boolean) => {
        setOrderQty((prevQty) => {
            const currentQty = prevQty[id] || 0;
            const newQty = increment ? currentQty + 1 : Math.max(0, currentQty - 1);
            return { ...prevQty, [id]: newQty };
        });
    };

    const totalTransaction = selectedOrderIds.reduce((total, orderId) => {
        const menuItem = menu.find((item) => item.id === orderId);
        const qty = orderQty[orderId] || 0;
        return total + (menuItem ? qty * menuItem.price : 0);
    }, 0);

    const handleSubmit = async (e: FormEvent) => {
        e.preventDefault();
        const TOKEN = getCookies("token") || "";
        const userId = Number(getCookies("id"));

        if (!userId) {
            toast("User not found", { hideProgressBar: true, containerId: "toastOrder", type: "error" });
            return;
        }

        const orderlists = Object.keys(orderQty)
            .filter((id) => orderQty[Number(id)] > 0)
            .map((id) => ({
                menuId: Number(id),
                quantity: orderQty[Number(id)],
                note: orderNote || "",
            }));

        const payload = {
            customer: orderForm.customer,
            table_number: orderForm.table_number,
            payment_method: orderForm.payment_method,
            status: orderForm.status,
            orderlists,
            user: { id: userId },
        };

        try {
            const response = await fetch(`${BASE_API_URL}/order`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${TOKEN}`,
                },
                body: JSON.stringify(payload),
            });

            const data = await response.json();
            if (data.status) {
                toast(data.message, { hideProgressBar: true, containerId: "toastOrder", type: "success" });
                setTimeout(() => {
                    resetOrderState(); 
                    router.refresh();
                });
            } else {
                toast(data.message, { hideProgressBar: true, containerId: "toastOrder", type: "warning" });
            }
        } catch (error) {
            toast("Something went wrong", { hideProgressBar: true, containerId: "toastOrder", type: "error" });
        }
    };

    const category = (cat: string): React.ReactNode => {
        if (cat === "FOOD") {
            return <span className="bg-blue-100 text-blue-800 text-sm font-medium px-2.5 py-0.5 rounded-full">Food</span>;
        }
        if (cat === "SNACK") {
            return <span className="bg-indigo-100 text-indigo-800 text-sm font-medium px-2.5 py-0.5 rounded-full">Snack</span>;
        }
        return <span className="bg-purple-100 text-purple-800 text-sm font-medium px-2.5 py-0.5 rounded-full">Drink</span>;
    };

    return (
        <div>
            <ToastContainer containerId="toastOrder" />
            <div className="mt-2 rounded-lg">
                <div className="flex flex-col my-10 px-10">
                    <h4 className="text-xl font-bold text-slate-900">Menu Yang Tersedia</h4>
                    <p className="mb-2">Silakan pilih menu yang ingin dipesan.</p>
                    <div className="flex items-center w-full max-w-md flex-grow">
                        <Search url={`/cashier/toko`} search={search} />
                    </div>
                </div>

                {loading ? (
                    <p className="text-white">Loading...</p>
                ) : menu.length === 0 ? (
                    <AlertToko title="Informasi">No data available</AlertToko>
                ) : (
                    <>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 place-items-center gap-4 my-10">
                            {menu.map((data) => (
                                <div key={data.id} className="p-4 rounded-lg flex flex-col items-center text-center">
                                    <Image width={300} height={270} src={`${BASE_IMAGE_MENU}/${data.picture}`} className="shadow-2xl" alt="preview" unoptimized />
                                    <div className="flex flex-col text-white items-center bg-primary rounded-b-md py-5 w-[300px]">
                                        <h5 className="font-bold text-lg">{data.name}</h5>
                                        <p className="text-sm">{data.description}</p>
                                        <span className="font-bold">Rp {data.price.toLocaleString()}</span>
                                        <div className="mt-2">{category(data.category)}</div>
                                        <div className="flex flex-col items-center mt-3">
                                            <ButtonPrimary type="button" onClick={() => handleOrder(data.id)}>
                                                Tambahkan Keranjang
                                            </ButtonPrimary>
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>

                        {order && (
                            <div className="fixed bg-black/60 backdrop-blur-sm flex items-center justify-center inset-0 z-99999">
                                <div className="relative bg-white shadow-lg p-6 rounded-xl w-[90%] max-w-xl overflow-y-auto max-h-[90vh]">
                                    <form onSubmit={handleSubmit} ref={formRef}>
                                        {menu.filter((item) => selectedOrderIds.includes(item.id)).map((data) => (
                                            <div key={data.id} className="mb-6 border-b pb-4">
                                                <Image
                                                    width={300}
                                                    height={270}
                                                    src={`${BASE_IMAGE_MENU}/${data.picture}`}
                                                    className="shadow-2xl rounded-lg"
                                                    alt="preview"
                                                    unoptimized
                                                />
                                                <div className="flex justify-between">
                                                    <div className="flex flex-col py-5">
                                                        <h5 className="font-bold text-lg mt-2">{data.name}</h5>
                                                        <p className="text-sm">{data.description}</p>
                                                        <span className="font-bold block mt-1">Rp {data.price.toLocaleString()}</span>
                                                    </div>
                                                    <div className="flex items-center space-x-3">
                                                        <button
                                                            className="bg-red-500 px-2 py-1 rounded-md text-white"
                                                            onClick={(e) => {
                                                                e.preventDefault();
                                                                updateQty(data.id, false);
                                                            }}
                                                            disabled={orderQty[data.id] <= 0}
                                                        >
                                                            -
                                                        </button>
                                                        <span className="text-lg text-primary">{orderQty[data.id] || 0}</span>
                                                        <button
                                                            className="bg-green-500 px-2 py-1 rounded-md text-white"
                                                            onClick={(e) => {
                                                                e.preventDefault();
                                                                updateQty(data.id, true);
                                                            }}
                                                        >
                                                            +
                                                        </button>

                                                    </div>
                                                </div>
                                            </div>
                                        ))}

                                        <InputGroupComponent id="customer" type="text" value={orderForm.customer} onChange={(val) => setOrderForm({ ...orderForm, customer: val })} required label="Customer" className="text-black" />
                                        <InputGroupComponent id="table_number" type="text" value={orderForm.table_number} onChange={(val) => setOrderForm({ ...orderForm, table_number: val })} required label="Table" className="text-black" />
                                        <CardSelect
                                            value={orderForm.payment_method}
                                            onChange={(val) => setOrderForm({ ...orderForm, payment_method: val })}
                                            label="Payment Method"
                                            required
                                            options={[
                                                { value: "CASH", label: "CASH" },
                                                { value: "QRIS", label: "QRIS" },
                                            ]} />
                                        <CardSelect
                                            value={orderForm.status}
                                            onChange={(val) => setOrderForm({ ...orderForm, status: val })}
                                            label="Status"
                                            required
                                            options={[
                                                { value: "NEW", label: "NEW" },
                                                { value: "PAID", label: "PAID" },
                                                { value: "DONE", label: "DONE" },
                                            ]} />
                                        <TextGroupComponent
                                            id="order-note"
                                            value={orderNote}
                                            onChange={(val) => setOrderNote(val)}
                                            label="Order Note"
                                            className="text-black" type={"number"} />

                                        {selectedOrderIds.length > 0 && (
                                            <div className="mt-6 bg-gray-700 p-4 rounded-lg text-white">
                                                <h4 className="text-lg font-bol d">Transaction Details</h4>
                                                <ul className="text-sm">
                                                    {selectedOrderIds.map((orderId) => {
                                                        const menuItem = menu.find((item) => item.id === orderId);
                                                        if (!menuItem) return null;
                                                        const qty = orderQty[orderId] || 0;
                                                        return (
                                                            <li key={orderId} className="flex justify-between border-b py-1">
                                                                <span>{menuItem.name} x {qty}</span>
                                                                <span>Rp {(qty * menuItem.price).toLocaleString()}</span>
                                                            </li>
                                                        );
                                                    })}
                                                </ul>
                                                <h4 className="text-lg font-bold mt-3">Total: Rp {totalTransaction.toLocaleString()}</h4>
                                            </div>
                                        )}
                                        <div className="flex justify-end gap-2 mt-4">
                                            <ButtonDanger type="button" onClick={resetOrderState}>Cancel</ButtonDanger>
                                            <ButtonPrimary type="submit">Save</ButtonPrimary>
                                        </div>
                                    </form>

                                </div>
                            </div>
                        )}
                    </>
                )}
            </div>
        </div>
    );
};

export default OrderPage; 


 "use client";

 import { useState, useEffect, useRef, FormEvent } from "react";
 import { useSearchParams, useRouter } from "next/navigation";
 import { IMenu, IOrder } from "@/app/types";
 import { getCookies } from "@/lib/client-cookies";
 import { BASE_API_URL, BASE_IMAGE_MENU } from "@/global";
 import { get } from "@/lib/bridge";
 import { AlertToko } from "@/components/alert";
 import Image from "next/image";
 import Search from "./search";
 import { ButtonPrimary, ButtonDanger } from "@/components/button";
 import { IoMdClose } from "react-icons/io";
 import { toast, ToastContainer } from "react-toastify";
 import { InputGroupComponent, TextGroupComponent } from "@/components/InputComponent";
 import CardSelect from "@/components/card";
 import { FaShoppingCart } from "react-icons/fa";

 const OrderPage = () => {
     const searchParams = useSearchParams();
     const search = searchParams.get("search") || "";
     const router = useRouter();

     const [menu, setMenu] = useState<IMenu[]>([]);
     const [loading, setLoading] = useState(true);
     const [orderQty, setOrderQty] = useState<{ [key: number]: number }>({});
     const [order, setOrder] = useState(false);
     const [cartOpen, setCartOpen] = useState(false);
     const [selectedOrderIds, setSelectedOrderIds] = useState<number[]>([]);

     const resetOrderState = () => {
         setOrderQty({});
         setSelectedOrderIds([]);
         setOrderForm({
             id: 0,
             uuid: "",
             customer: "",
             table_number: "",
             total_price: 0,
             payment_method: "",
             status: "",
             createdAt: "",
             updatedAt: "",
             userId: 0,
             orderLists: [],
         });
         setOrderNote("");
         setOrder(false);
     };

     const [orderForm, setOrderForm] = useState<IOrder>({
         id: 0,
         uuid: "",
         customer: "",
         table_number: "",
         total_price: 0,
         payment_method: "",
         status: "",
         createdAt: "",
         updatedAt: "",
         userId: 0,
         orderLists: [],
     });

     const [orderNote, setOrderNote] = useState<string>("");
     const formRef = useRef<HTMLFormElement>(null);

     const getMenu = async () => {
         try {
             const TOKEN = getCookies("token") || "";
             const url = `${BASE_API_URL}/menu?search=${search}`;
             const { data } = await get(url, TOKEN);
             if ((data as { status: boolean; data: IMenu[] }).status) {
                 setMenu((data as { status: boolean; data: IMenu[] }).data);
             }
         } catch (error) {
             console.error("Error get menu:", error);
         } finally {
             setLoading(false);
         }
     };

     useEffect(() => {
         getMenu();
     }, [search]);

     const handleOrder = (id: number) => {
         if (!selectedOrderIds.includes(id)) {
             setSelectedOrderIds((prev) => [...prev, id]);
         }
         updateQty(id, true);
     };

     const updateQty = (id: number, increment: boolean) => {
         setOrderQty((prevQty) => {
             const currentQty = prevQty[id] || 0;
             const newQty = increment ? currentQty + 1 : Math.max(0, currentQty - 1);
             return { ...prevQty, [id]: newQty };
         });
     };

     const totalTransaction = selectedOrderIds.reduce((total, orderId) => {
         const menuItem = menu.find((item) => item.id === orderId);
         const qty = orderQty[orderId] || 0;
         return total + (menuItem ? qty * menuItem.price : 0);
     }, 0);

     const handleSubmit = async (e: FormEvent) => {
         e.preventDefault();
         const TOKEN = getCookies("token") || "";
         const userId = Number(getCookies("id"));

         if (!userId) {
             toast("User not found", { hideProgressBar: true, containerId: "toastOrder", type: "error" });
             return;
         }

         const orderlists = Object.keys(orderQty)
             .filter((id) => orderQty[Number(id)] > 0)
             .map((id) => ({
                 menuId: Number(id),
                 quantity: orderQty[Number(id)],
                 note: orderNote || "",
             }));

         const payload = {
             customer: orderForm.customer,
             table_number: orderForm.table_number,
             payment_method: orderForm.payment_method,
             status: orderForm.status,
             orderlists,
             user: { id: userId },
         };

         try {
             const response = await fetch(`${BASE_API_URL}/order`, {
                 method: "POST",
                 headers: {
                     "Content-Type": "application/json",
                     Authorization: `Bearer ${TOKEN}`,
                 },
                 body: JSON.stringify(payload),
             });

             const data = await response.json();
             if (data.status) {
                 toast(data.message, { hideProgressBar: true, containerId: "toastOrder", type: "success" });
                 setTimeout(() => {
                     resetOrderState();
                     router.refresh();
                 });
             } else {
                 toast(data.message, { hideProgressBar: true, containerId: "toastOrder", type: "warning" });
             }
         } catch (error) {
             toast("Something went wrong", { hideProgressBar: true, containerId: "toastOrder", type: "error" });
         }
     };

     const category = (cat: string): React.ReactNode => {
         if (cat === "FOOD") {
             return <span className="bg-blue-100 text-blue-800 text-sm font-medium px-2.5 py-0.5 rounded-full">Food</span>;
         }
         if (cat === "SNACK") {
             return <span className="bg-indigo-100 text-indigo-800 text-sm font-medium px-2.5 py-0.5 rounded-full">Snack</span>;
         }
         return <span className="bg-purple-100 text-purple-800 text-sm font-medium px-2.5 py-0.5 rounded-full">Drink</span>;
     };

     return (
         <div className="relative">
             <ToastContainer containerId="toastOrder" />
             {/* Cart Icon */}
             <div className=" absolute top-4 right-6 z-50">
                 <button onClick={() => setCartOpen(!cartOpen)} className="relative text-2xl">
                     <FaShoppingCart/>
                     {selectedOrderIds.length > 0 && (
                         <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full px-1">
                             {selectedOrderIds.reduce((total, id) => total + (orderQty[id] || 0), 0)}
                         </span>
                     )}
                 </button>
             </div>

             <div className="mt-2 rounded-lg">
                 <div className="flex flex-col my-10 px-10">
                     <h4 className="text-xl font-bold text-slate-900">Menu Yang Tersedia</h4>
                     <p className="mb-2">Silakan pilih menu yang ingin dipesan.</p>
                     <div className="flex items-center w-full max-w-md flex-grow">
                         <Search url={`/cashier/toko`} search={search} />
                     </div>
                 </div>

                 {loading ? (
                     <p className="text-white">Loading...</p>
                 ) : menu.length === 0 ? (
                     <AlertToko title="Informasi">No data available</AlertToko>
                 ) : (
                     <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 place-items-center gap-4 my-10">
                         {menu.map((data) => (
                             <div key={data.id} className="p-4 rounded-lg flex flex-col items-center text-center">
                                 <Image width={300} height={270} src={`${BASE_IMAGE_MENU}/${data.picture}`} className="shadow-2xl" alt="preview" unoptimized />
                                 <div className="flex flex-col text-white items-center bg-primary rounded-b-md py-5 w-[300px]">
                                     <h5 className="font-bold text-lg">{data.name}</h5>
                                     <p className="text-sm">{data.description}</p>
                                     <span className="font-bold">Rp {data.price.toLocaleString()}</span>
                                     <div className="mt-2">{category(data.category)}</div>
                                     <div className="flex flex-col items-center mt-3">
                                         <ButtonPrimary type="button" onClick={() => handleOrder(data.id)}>
                                             Tambahkan Keranjang
                                         </ButtonPrimary>
                                     </div>
                                 </div>
                             </div>
                         ))}
                     </div>
                 )}

                 {/* Sidebar Cart */}
                 {cartOpen && (
                     <div className="fixed top-0 right-0 w-full sm:w-[400px] h-full bg-white shadow-lg z-[99999] p-4 overflow-y-auto">
                         <div className="flex justify-between items-center mb-4">
                             <h2 className="text-xl font-bold">Keranjang Saya</h2>
                             <button onClick={() => setCartOpen(false)} className="text-red-500 text-xl">
                                 <IoMdClose />
                             </button>
                         </div>

                         {selectedOrderIds.length === 0 ? (
                             <p className="text-center text-gray-500">Keranjang kosong</p>
                         ) : (
                             <div>
                                 {selectedOrderIds.map((id) => {
                                     const item = menu.find((m) => m.id === id);
                                     const qty = orderQty[id] || 0;
                                     if (!item) return null;
                                     return (
                                         <div key={id} className="mb-4 border-b pb-2">
                                             <h4 className="font-semibold">{item.name}</h4>
                                             <p className="text-sm text-gray-600">Rp {item.price.toLocaleString()}</p>
                                             <div className="flex items-center space-x-2 mt-2">
                                                 <button className="bg-red-500 text-white px-2 rounded" onClick={() => updateQty(id, false)} disabled={qty <= 0}>-</button>
                                                 <span>{qty}</span>
                                                 <button className="bg-green-500 text-white px-2 rounded" onClick={() => updateQty(id, true)}>+</button>
                                             </div>
                                         </div>
                                     );
                                 })}
                                 <div className="pt-4 mt-4">
                                     <h4 className="font-semibold">Total: Rp {totalTransaction.toLocaleString()}</h4>
                                     <button className="bg-primary text-white px-4 py-2 rounded mt-2 w-full" onClick={() => {
                                         setCartOpen(false);
                                         setOrder(true);
                                     }}>
                                         Order Sekarang
                                     </button>
                                 </div>
                             </div>
                         )}
                     </div>
                 )}

                 {/* Modal Order */}
                 {order && (
                     <div className="fixed bg-black/60 backdrop-blur-sm flex items-center justify-center inset-0 z-99999">
                         <div className="relative bg-white shadow-lg p-6 rounded-xl w-[90%] max-w-xl overflow-y-auto max-h-[90vh]">
                             <form onSubmit={handleSubmit} ref={formRef}>
                                 {menu.filter((item) => selectedOrderIds.includes(item.id)).map((data) => (
                                     <div key={data.id} className="mb-6 border-b pb-4">
                                         <Image width={300} height={270} src={`${BASE_IMAGE_MENU}/${data.picture}`} className="shadow-2xl rounded-lg" alt="preview" unoptimized />
                                         <div className="flex justify-between">
                                             <div className="flex flex-col py-5">
                                                 <h5 className="font-bold text-lg mt-2">{data.name}</h5>
                                                 <p className="text-sm">{data.description}</p>
                                                 <span className="font-bold block mt-1">Rp {data.price.toLocaleString()}</span>
                                             </div>
                                             <div className="flex items-center space-x-3">
                                                 <button className="bg-red-500 px-2 py-1 rounded-md text-white" onClick={(e) => {
                                                     e.preventDefault();
                                                     updateQty(data.id, false);
                                                 }} disabled={orderQty[data.id] <= 0}>-</button>
                                                 <span className="text-lg text-primary">{orderQty[data.id] || 0}</span>
                                                 <button className="bg-green-500 px-2 py-1 rounded-md text-white" onClick={(e) => {
                                                     e.preventDefault();
                                                     updateQty(data.id, true);
                                                 }}>+</button>
                                             </div>
                                         </div>
                                     </div>
                                 ))}

                                 <InputGroupComponent id="customer" type="text" value={orderForm.customer} onChange={(val) => setOrderForm({ ...orderForm, customer: val })} required label="Customer" className="text-black" />
                                 <InputGroupComponent id="table_number" type="text" value={orderForm.table_number} onChange={(val) => setOrderForm({ ...orderForm, table_number: val })} required label="Table" className="text-black" />
                                 <CardSelect value={orderForm.payment_method} onChange={(val) => setOrderForm({ ...orderForm, payment_method: val })} label="Payment Method" required options={[{ value: "CASH", label: "CASH" }, { value: "QRIS", label: "QRIS" }]} />
                                 <CardSelect value={orderForm.status} onChange={(val) => setOrderForm({ ...orderForm, status: val })} label="Status" required options={[{ value: "NEW", label: "NEW" }, { value: "PAID", label: "PAID" }, { value: "DONE", label: "DONE" }]} />
                                 <TextGroupComponent id="order-note" value={orderNote} onChange={(val) => setOrderNote(val)} label="Order Note" className="text-black" type={"number"} />

                                 {selectedOrderIds.length > 0 && (
                                     <div className="mt-6 bg-gray-700 p-4 rounded-lg text-white">
                                         <h4 className="text-lg font-bold">Transaction Details</h4>
                                         <ul className="text-sm">
                                             {selectedOrderIds.map((orderId) => {
                                                 const menuItem = menu.find((item) => item.id === orderId);
                                                 if (!menuItem) return null;
                                                 const qty = orderQty[orderId] || 0;
                                                 return (
                                                     <li key={orderId} className="flex justify-between border-b py-1">
                                                         <span>{menuItem.name} x {qty}</span>
                                                         <span>Rp {(qty * menuItem.price).toLocaleString()}</span>
                                                     </li>
                                                 );
                                             })}
                                         </ul>
                                         <h4 className="text-lg font-bold mt-3">Total: Rp {totalTransaction.toLocaleString()}</h4>
                                     </div>
                                 )}

                                 <div className="flex justify-end gap-2 mt-4">
                                     <ButtonDanger type="button" onClick={resetOrderState}>Cancel</ButtonDanger>
                                     <ButtonPrimary type="submit">Save</ButtonPrimary>
                                 </div>
                             </form>
                         </div>
                     </div>
                 )}
             </div>
         </div>
     );
 };

 export default OrderPage;